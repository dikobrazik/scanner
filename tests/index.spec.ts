import { getPointer, Point, QrCode, scan, getBit, getNBits } from "../src";

const qrCodes: Record<string, QrCode> = {
  Hi: [
    [1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1],
    [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1],
    [1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1],
    [1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1],
    [1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1],
    [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1],
    [1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1],
    [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1],
    [1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0],
    [1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0],
    [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1],
    [1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1],
    [1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1],
    [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0],
    [1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0],
    [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1],
  ],
  Warrior: [
    [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1],
    [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1],
    [1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1],
    [1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1],
    [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1],
    [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1],
    [1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1],
    [1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1],
    [1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1],
    [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0],
    [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1],
    [1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1],
    [1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1],
    [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0],
    [1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0],
    [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1],
  ],
};

describe("Scan", () => {
  it.each(Object.entries(qrCodes))("Should scan qr code", (text, qrCode) => {
    expect(scan(qrCode)).toEqual(text);
  });
});

describe("Get n bits function", () => {
  it("Should return 4 bits", () => {
    const pointer = getPointer();
    const qrCode = Array(21).fill(Array(21).fill(0));
    const bits = getNBits(pointer, qrCode, 4);
    expect(bits.length).toEqual(4);
    expect(bits).toEqual([1, 0, 0, 1]);
  });

  it("Should return 0 bits", () => {
    const pointer = getPointer();
    const qrCode = Array(21).fill(Array(21).fill(0));
    const bits = getNBits(pointer, qrCode, 0);
    expect(bits.length).toEqual(0);
    expect(bits).toEqual([]);
  });
});

describe("Mask encoding", () => {
  test.each`
    x     | y     | bit  | expected
    ${20} | ${20} | ${0} | ${1}
    ${20} | ${19} | ${0} | ${0}
    ${0}  | ${0}  | ${1} | ${0}
    ${0}  | ${1}  | ${1} | ${1}
    ${1}  | ${0}  | ${1} | ${1}
  `("Passed in point x=$x and y=$y - $bit, should return $expected", ({ x, y, bit, expected }) => {
    const qrCode = Array(21).fill(Array(21).fill(0));
    qrCode[y][x] = bit;
    expect(getBit(qrCode, { x, y })).toEqual(expected);
  });
});

describe("Pointer test", () => {
  let pointer: Generator<Point, Point, unknown>;
  beforeAll(() => {
    pointer = getPointer();
  });
  it.each`
    x     | y
    ${20} | ${20}
    ${19} | ${20}
    ${20} | ${19}
    ${19} | ${19}
    ${20} | ${18}
    ${19} | ${18}
    ${20} | ${17}
    ${19} | ${17}
    ${20} | ${16}
    ${19} | ${16}
    ${20} | ${15}
    ${19} | ${15}
    ${20} | ${14}
    ${19} | ${14}
    ${20} | ${13}
    ${19} | ${13}
    ${20} | ${12}
    ${19} | ${12}
    ${20} | ${11}
    ${19} | ${11}
    ${20} | ${10}
    ${19} | ${10}
    ${20} | ${9}
    ${19} | ${9}
    ${18} | ${9}
    ${17} | ${9}
    ${18} | ${10}
    ${17} | ${10}
    ${18} | ${11}
    ${17} | ${11}
    ${18} | ${12}
    ${17} | ${12}
    ${18} | ${13}
    ${17} | ${13}
    ${18} | ${14}
    ${17} | ${14}
    ${18} | ${15}
    ${17} | ${15}
    ${18} | ${16}
    ${17} | ${16}
    ${18} | ${17}
    ${17} | ${17}
    ${18} | ${18}
    ${17} | ${18}
    ${18} | ${19}
    ${17} | ${19}
    ${18} | ${20}
    ${17} | ${20}
    ${16} | ${20}
    ${15} | ${20}
    ${16} | ${19}
    ${15} | ${19}
  `("Pointer movements", ({ x, y }) => {
    expect(pointer.next().value).toEqual({ x, y });
  });
});
